trigger:
  branches:
    include:
      - main
      - develop

variables:
  - name: nodeVersion
    value: '18.x'
  - name: azureSubscription
    value: 'Azure-Service-Connection'
  - name: resourceGroupName
    value: 'ai-resume-builder-rg'
  - name: staticWebAppName
    value: 'ai-resume-builder-app'

stages:
  - stage: Build
    displayName: 'Build Application'
    jobs:
      - job: BuildFrontend
        displayName: 'Build Frontend'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            displayName: 'Use Node.js $(nodeVersion)'
            inputs:
              versionSpec: '$(nodeVersion)'
              
          - task: Cache@2
            displayName: 'Cache npm dependencies'
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: '$(System.DefaultWorkingDirectory)/node_modules'
              
          - script: |
              npm ci
            displayName: 'Install dependencies'
            
          - script: |
              npm run type-check
            displayName: 'Type check'
            
          - script: |
              npm run lint
            displayName: 'Lint code'
            
          - script: |
              npm run build
            displayName: 'Build application'
            
          - task: PublishBuildArtifacts@1
            displayName: 'Publish build artifacts'
            inputs:
              pathToPublish: '$(System.DefaultWorkingDirectory)/.next'
              artifactName: 'frontend-build'
              
          - task: PublishBuildArtifacts@1
            displayName: 'Publish source artifacts'
            inputs:
              pathToPublish: '$(System.DefaultWorkingDirectory)'
              artifactName: 'source-code'

  - stage: DeployDev
    displayName: 'Deploy to Development'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
      - deployment: DeployToDev
        displayName: 'Deploy to Development Environment'
        environment: 'development'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@0
                  displayName: 'Download build artifacts'
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'source-code'
                    downloadPath: '$(System.ArtifactsDirectory)'
                    
                - task: AzureStaticWebApp@0
                  displayName: 'Deploy to Azure Static Web Apps'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    cwd: '$(System.ArtifactsDirectory)/source-code'
                    app_location: '/'
                    api_location: ''
                    output_location: '.next'
                    app_build_command: 'npm run build'
                    azure_static_web_apps_api_token: '$(AZURE_STATIC_WEB_APPS_API_TOKEN_DEV)'

  - stage: DeployProd
    displayName: 'Deploy to Production'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployToProd
        displayName: 'Deploy to Production Environment'
        environment: 'production'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@0
                  displayName: 'Download build artifacts'
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'source-code'
                    downloadPath: '$(System.ArtifactsDirectory)'
                    
                - task: AzureCLI@2
                  displayName: 'Create Azure Resources'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Create resource group if it doesn't exist
                      az group create --name $(resourceGroupName) --location "East US"
                      
                      # Create Cosmos DB account
                      az cosmosdb create \
                        --name ai-resume-cosmosdb \
                        --resource-group $(resourceGroupName) \
                        --kind GlobalDocumentDB \
                        --locations regionName="East US" failoverPriority=0 isZoneRedundant=False
                      
                      # Create Cosmos DB database
                      az cosmosdb sql database create \
                        --account-name ai-resume-cosmosdb \
                        --resource-group $(resourceGroupName) \
                        --name ResumeBuilderDB
                      
                      # Create Cosmos DB containers
                      az cosmosdb sql container create \
                        --account-name ai-resume-cosmosdb \
                        --resource-group $(resourceGroupName) \
                        --database-name ResumeBuilderDB \
                        --name users \
                        --partition-key-path "/id" \
                        --throughput 400
                        
                      az cosmosdb sql container create \
                        --account-name ai-resume-cosmosdb \
                        --resource-group $(resourceGroupName) \
                        --database-name ResumeBuilderDB \
                        --name resumes \
                        --partition-key-path "/user_id" \
                        --throughput 400
                        
                      az cosmosdb sql container create \
                        --account-name ai-resume-cosmosdb \
                        --resource-group $(resourceGroupName) \
                        --database-name ResumeBuilderDB \
                        --name job-analyses \
                        --partition-key-path "/resume_id" \
                        --throughput 400
                      
                      # Create Storage Account
                      az storage account create \
                        --name airesumestorage \
                        --resource-group $(resourceGroupName) \
                        --location "East US" \
                        --sku Standard_LRS \
                        --kind StorageV2
                      
                      # Create blob containers
                      az storage container create \
                        --name resumes \
                        --account-name airesumestorage \
                        --public-access off
                        
                      az storage container create \
                        --name enhanced-resumes \
                        --account-name airesumestorage \
                        --public-access off
                    
                - task: AzureStaticWebApp@0
                  displayName: 'Deploy to Azure Static Web Apps'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    cwd: '$(System.ArtifactsDirectory)/source-code'
                    app_location: '/'
                    api_location: ''
                    output_location: '.next'
                    app_build_command: 'npm run build'
                    azure_static_web_apps_api_token: '$(AZURE_STATIC_WEB_APPS_API_TOKEN_PROD)'